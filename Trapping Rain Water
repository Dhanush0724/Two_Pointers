class Solution:
    def trap(self, height: List[int]) -> int:
        # O(3n) , space 2n for prefix and suffix
        # n = len(height)
        # prefix = [0]*n
        # prefix[0] = height[0]
        # for i in range(1,n):
        #     prefix[i] = max(prefix[i-1],height[i])
        # suffix = [0]*n
        # suffix[n-1] = height[n-1]
        # for j in range(n-2,-1,-1):
        #     suffix[j] = max(suffix[j+1],height[j])
        # total = 0
        # for i in range(n):
        #     left_max = prefix[i]
        #     right_max = suffix[i]

        #     if height[i] < left_max and height[i] < right_max :
        #         total+=min(left_max,right_max)-height[i]
        # return total   

        # # reduced space to n only the suffix i keep
        # n = len(height)
        
        # suffix = [0]*n
        # suffix[n-1] = height[n-1]
        # for j in range(n-2,-1,-1):
        #     suffix[j] = max(suffix[j+1],height[j])

        # total = 0
        # left_max = float('-inf')
        # for i in range(n):

        #     left_max = max(left_max,height[i])
        #     right_max = suffix[i]

        #     if height[i] < left_max and height[i] < right_max :
        #         total+=min(left_max,right_max)-height[i]
        # return total 


        # n = len(height)
        # total = 0

        # for i in range(n):
        #     left_max = max(height[:i+1])   # O(n)
        #     right_max = max(height[i:])   # O(n)
        #     total += min(left_max, right_max) - height[i]

        # return total

        n = len(height)
        left_max = 0
        right_max = 0
        l = 0
        r = n-1
        total = 0

        while l < r :

            if height[l] < height[r] :

                if left_max > height[l] :
                    total += left_max - height[l]
                else :
                    left_max = height[l]
                l+=1
            else :

                if right_max > height[r] :
                    total += right_max - height[r]
                else :
                    right_max = height[r]
                r-=1
        return total
                
